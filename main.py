import logging
import time
from datetime import datetime
import pika
from dotenv import dotenv_values

import telebot

env = dotenv_values(".env")

tg_bot = telebot.TeleBot(env.get('BOT_TOKEN', -1))

from core.whitelist import (national_bank_kz, cbr_forex, cbr_reestersavers, cbr_advisors,
                            cbr_trust, cbr_specdepositaries, cbr_dealers, cbr_depositaries,
                            cbr_brokers, govkz_securities_transactions, govkz_individual_banking_transactions, bafin,
                            scm, base_1, base_3, base_5, base_9, base_10,
                            bot, cbb, centralbank, eservices, fma
                            )
from core.blacklist import (cbr_unlicensing, cbr_warninglist, govkz_bannedbanks, govkz_banned_fin_organizations,
                            govkz_refund_organizations, govkz_bannedbanks_2level, govkz_unfairactivity_organization,
                            govkz_new_reestr, consob, sca, amf, sfc, fsa, asc,
                            base_2, base_6, base_11, parse3, parse7, parse9
                            )


class Parsers:
    WINDOW_BETWEEN_MESSAGES_SECONDS = 60 * 60 * 12
    WINDOW_BETWEEN_SOURCES_SECONDS = 60
    data_units_load_counter = 0
    parsers_data: list[str, int] = []
    ONE_PARSER_MSG = '''üåê {0} - [<strong>{1}</strong>] \n'''
    SUCCESS_PARSERS_LOG_MSG = '''{0}\nüîö Amount of dataunits - <b>{1}</b>
    '''

    def publisher(self, func: callable, source_name: str) -> None:
        try:
            parsers_load_counter = 0

            # self.write_log_and_send_to_telegram(f"ETL process with source <{source_name}> has been started")
            logging.info(f"ETL process with source <{source_name}> has been started")

            connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
            channel = connection.channel()
            channel.queue_declare(queue='ETL', durable=True)

            for data_unit in func:
                logging.info(data_unit)
                channel.basic_publish(exchange='', routing_key='ETL', body=data_unit)
                self.data_units_load_counter += 1
                parsers_load_counter += 1

            self.parsers_data.append([source_name, parsers_load_counter])
            # self.write_log_and_send_to_telegram(
            logging.info(
                f"ETL process with source <{source_name}> has been finished. The amount of data in "
                f"this parser is {parsers_load_counter}. Amount of dataunits for parsing session "
                f"(this parser and before them): {self.data_units_load_counter}")

            parsers_load_counter = None
            time.sleep(self.WINDOW_BETWEEN_SOURCES_SECONDS)
        except Exception as e:
            self.parsers_data.append([source_name, -1])
            self.write_log_and_send_to_telegram(f"Current resource was stopped cause of global error: {e}",
                                                'error')
        finally:
            if 'connection' in locals():
                connection.close()

    def start_parsing(self) -> None:
        self.write_log_and_send_to_telegram(f"Loop of scraping has been started {datetime.now()}")

        for parser in self.list_of_parsers():
            self.publisher(parser[0], parser[1])

        self.logging_for_tg(self.parsers_data, self.data_units_load_counter)
        self.write_log_and_send_to_telegram(f"Loop of scraping has been finished {datetime.now()}")

    @staticmethod
    def list_of_parsers() -> list[callable, str]:
        return [
            [bafin.data_unit_iterator(), "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö BaFin"],  # 0
            [consob.data_unit_iterator(), "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ò—Ç–∞–ª–∏–∏"],  # 1
            [sca.data_unit_iterator(), "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –û–ê–≠"],  # 2
            [amf.data_unit_iterator(), "–ß–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ —Å–∞–π—Ç–æ–≤ –§—Ä–∞–Ω—Ü–∏–∏"],  # 3
            [sfc.data_unit_iterator(), "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. C–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö SFC"],  # 4
            [fsa.data_unit_iterator(),  # 5
             "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –°–ø–∏—Å–æ–∫ –ª–∏—Ü, –∑–∞–Ω–∏–º–∞—é—â–∏—Ö—Å—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ø–ø–æ–Ω–∏–∏"],
            [asc.data_unit_iterator(), "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è –ö–∞–Ω–∞–¥—ã"],  # 6
            [scm.data_unit_iterator(), "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –ú–∞–ª–∞–π–∑–∏–∏"],  # 7
            [national_bank_kz.data_unit_iterator(), "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–ö"],  # 8
            [cbr_forex.data_unit_iterator(), "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–µ–∫—Å-–¥–∏–ª–µ—Ä–æ–≤"],  # 9
            [cbr_reestersavers.data_unit_iterator(), "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"],  # 10
            [cbr_trust.data_unit_iterator(), "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö"],  # 11
            [cbr_dealers.data_unit_iterator(), "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ –¥–∏–ª–µ—Ä–æ–≤"],  # 12
            [cbr_depositaries.data_unit_iterator(), "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞—Ä–∏–µ–≤"],  # 13
            [cbr_brokers.data_unit_iterator(), "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ –±—Ä–æ–∫–µ—Ä–æ–≤"],  # 14
            [cbr_specdepositaries.data_unit_iterator(),  # 15
             "–¶–ë –†–§ –†–µ–µ—Å—Ç—Ä –ª–∏—Ü–µ–Ω–∑–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ä–∏–µ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤, –ø–∞–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤ –∏ –Ω–µ–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤"],
            [cbr_advisors.data_unit_iterator(), "–¶–ë –†–§ –ï–¥–∏–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤"],  # 16
            [govkz_securities_transactions.data_unit_iterator(),  # 17
             "GOV KZ –†–µ–µ—Å—Ç—Ä –≤—ã–¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∏ –∏–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥"],
            [govkz_individual_banking_transactions.data_unit_iterator(),  # 18
             "GOV KZ –†–µ–µ—Å—Ç—Ä –≤—ã–¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"],
            [govkz_bannedbanks.data_unit_iterator(),  # 19
             "GOV KZ –†–ï–ï–°–¢–† –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–•, –õ–ò–ë–û –ü–†–ï–ö–†–ê–¢–ò–í–®–ò–• –î–ï–ô–°–¢–í–ò–ï (–õ–ò–®–ï–ù–ù–´–•) –õ–ò–¶–ï–ù–ó–ò–ô –ù–ê –ü–†–û–í–ï–î–ï–ù–ò–ï –ë–ê–ù–ö–û–í–°–ö–ò–• –ò –ò–ù–´–• –û–ü–ï–†–ê–¶–ò–ô, –û–°–£–©–ï–°–¢–í–õ–Ø–ï–ú–´–• –ë–ê–ù–ö–ê–ú–ò"],
            [govkz_banned_fin_organizations.data_unit_iterator(),  # 20
             "GOV KZ –†–µ–µ—Å—Ç—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö, –ª–∏–±–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏–≤—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–µ (–ª–∏—à–µ–Ω–Ω—ã—Ö) –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"],
            [govkz_refund_organizations.data_unit_iterator(),  # 21
             "GOV KZ –†–µ–µ—Å—Ç—Ä –ø—Ä–µ–∫—Ä–∞—Ç–∏–≤—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–≤—à–∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–≤—è–∑–∏ —Å –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º."],
            [govkz_bannedbanks_2level.data_unit_iterator(),  # 22
             "GOV KZ –†–µ–µ—Å—Ç—Ä –ø—Ä–µ–∫—Ä–∞—Ç–∏–≤—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π –±–∞–Ω–∫–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å–≤—è–∑–∏ —Å –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º"],
            [govkz_unfairactivity_organization.data_unit_iterator(),
             "GOV KZ –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∏–º–µ—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],  # 23
            [cbr_unlicensing.data_unit_iterator(),
             "–¶–ë –†–§ –†–µ–µ—Å—Ç—Ä –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä—ã–Ω–∫–∞ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥"],  # 24
            [cbr_warninglist.data_unit_iterator(),
             "–¶–ë –†–§ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Ä—ã–Ω–∫–µ"],  # 25
            [govkz_new_reestr.data_unit_iterator(), "–†–µ–µ—Å—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–∏—Ä–∞–º–∏–¥"],  # 26
            [base_1.data_unit_iterator(), "FMA –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–æ—Ç—á–µ—Ç–Ω—ã–µ –ª–∏—Ü–∞"],  # 27
            [base_2.data_unit_iterator(), "FMA –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"],  # 28    ################ –î–æ —ç—Ç–æ–≥–æ –µ—Å—Ç—å.
            [base_3.data_unit_iterator(), "–†–µ–µ—Å—Ç—Ä —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ –§–∏–Ω–ª—è–Ω–¥–∏—è"],  # 29
            [base_5.data_unit_iterator(), "–†–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—Å–ª—É–≥"],  # 30
            [base_6.data_unit_iterator(), "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –ö–∞–Ω–∞–¥—ã"],  # 31
            [base_9.data_unit_iterator(), "–†–µ–µ—Å—Ç—Ä —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã—Ö –ª–∏—Ü –ê–Ω–¥–æ—Ä—Ä—ã"],  # 32
            [base_10.data_unit_iterator(), "–°–ø–∏—Å–æ–∫ PSAN, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ AMF"],  # 33
            [base_11.data_unit_iterator(), "–†–µ–µ—Å—Ç—Ä –∑–∞—â–∏—Ç—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤"],  # 34
            [parse3.data_unit_iterator(), "Parse3"],  # 35
            [parse7.data_unit_iterator(), "Parse7"],  # 36
            [parse9.data_unit_iterator(), "Parse9"],  # 37
            [bot.data_unit_iterator(), "BOT"],  # 38
            [cbb.data_unit_iterator(), "CBB"],  # 39
            [centralbank.data_unit_iterator(), "Centralbank"],  # 40
            [eservices.data_unit_iterator(), "–†–µ–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—á–µ—Ä–µ–∂–¥–µ–Ω–∏–π –°–∏–Ω–≥–∞–ø—É—Ä–∞"],  # 41
            [fma.data_unit_iterator(), "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –Ω–∞–¥–∑–æ—Ä –ê–≤—Å—Ç—Ä–∏–∏"],  # 42
        ][1:2]

    @staticmethod
    def write_log_and_send_to_telegram(text: str, type_of_log: str = 'info') -> None:
        if type_of_log == 'info':
            logging.info(text)
            tg_bot.send_message(env['CHAT_FOR_SUCCESS_LOGS'], text)
        if type_of_log == 'error':
            logging.error(text)
            tg_bot.send_message(env['CHAT_FOR_ERROR_LOGS'], text)

    def logging_for_tg(self, data_units: list[str, int], amount: int):
        parsers_msg = ''
        for d_u in data_units:
            parsers_msg += self.ONE_PARSER_MSG.format(d_u[0], str(d_u[1]))

        sending_message = self.SUCCESS_PARSERS_LOG_MSG.format(parsers_msg, str(amount))
        tg_bot.send_message(env['CHAT_FOR_SUCCESS_LOGS'], sending_message, parse_mode='html')
